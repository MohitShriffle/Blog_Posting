c
cc
c
@current_user
n
decoded
n
decoded
n
token
n
token
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
n
params
c
params
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
cc
n
t
n
t
Plan.reflect_on_association(:users)
users
c
params[:email]
c
JSON.parse(subject.body)
JSON.parse(response.body)
JSON.parse(responce.body)
JSON.parse(subject.body)
c
params
user
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
params
user
c
user
n
user
n
params[:email]
c
params[:email]
user
n
user
n
params[:email].blank?
n
user.email
user
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
JSON.parse(response.body)
JSON.parse(responce.body)
c
user
n
user
n
params
JSON.parse(responce.body)
JSON.parse(response.body)
JSON.parse(subject.body)
c
user
c
JSON.parse(subject.body)
subject.body
c
n
user
n
params[email]
n
params[email]
c
params
user
c
params[:email]
params
User.find_by(email: params[:email])
user
n
user
n
c
user.email
user
c
JSON.parse(subject.body)
subject.body
response.body
c
params
c
@current_user
n
decoded
n
decoded
token
n
token
n
token
toke
c
User.find(decoded[:user_id])
jwt_decode(token)
token.split(' ').last if token
token
n
params
c
params
token
c
token
c
response.body
params
c
subject.body
c
subject.body
c
JSON.parse(subject.body)
JSON.parse(response.body)
response.body
c
JSON.parse(response.body)
responce.body
subject.body
c
params
c
params
c
bearer_token
c
bearer_token
c
jwt_token_1(user)
token
let(:bearer_token)
bearer_token
c
@blogview
c
@blog.body
@blog
c
@blog
c
@subscription.start_date
c
@subscription
c
@plan.name == "Basic" || @plan.name == "Premium"
c
@plan.name = "Basic"
n
c
@plan.name
c
@user.password
@user.email
@user.name
@user
c
n
c
params
c
user
c
user
userer
c
user
c
user
c
@current_user
user
c
user
c
header = request.headers[:token] || params[:token]
c
params
params[:token]
header = request.headers[:token] || params[:token]
c
C
 request.headers['Authorization']
c
request
 request.headers['Authorization']
c
e
n
request
request.headers['Authorization']
c
mk
mk.type
mk.second
mk.first
mk
c
@current_user.update(blog_views_count: (@current_user.blog_views_count+1))
@current_user.update(blog_views_count: (blog_views_count+1))
@current_user.update(blog_views_count+1)
c
@current_user.blog_views_count
c
viewed_blogs_count
c
viewed_blogs_count
c
@current_user.blogviews.create(blog_id: blogs_to_display.pluck(:id))
blogs_to_display.pluck(:id)
c
