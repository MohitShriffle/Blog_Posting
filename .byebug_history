c
blogs1
n
blogs1
n
blogs1
n
c
JSON.parse(subject.body)
c
blog
c
@blog
c
@blog
blog
c
blog
c
blog
c
JSON.parse(subject.body)
c
blog
params
c
blog
c
blog
c
blog
c
blog
c
blog
c
blog
c
blog
c
blog
JSON.parse(subject.body)
c
params
c
blog.valid?
blog.save
params
c
JSON.parse(subject.body)
c
@blog.user == @current_user && @blog.modifications_count < 2
n
@current_user
check_can_update?
user
c
params
user
c
blog.errors.full_messages
blog.error.full_messages
blog
n
@current_user
params
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
params
c
userc
user
c
Blog.where.not(user_id: @current_user.id)
n
c
blogs_to_display
JSON.parse(subject.body)
@current_user.blog_views_count
n
@current_user.blog_views_count
n
@current_user.blog_views_count
n
c
expect { subject }.to change { user.blog_views_count }.from(0).to(1)
c
JSON.parse(subject.body)
c
@current_user.blog_views_count
n
@current_user.blog_views_count
n
@current_user.blog_views_count >= 5
n
@current_user
c
user
c
Blog.all
n
c
blog.user_id
user.id
c
Blog.where.not(user_id: @current_user.id).limit(5)
@current_user.blog_views_count >=5
@current_user.blog_views_count
limited_blogs
n
limited_blogs
n
c
user.blog_views_count
user
user.blog_view_count
c
@current_user
@current_user.blog_view_count
params
user
n
@current_user.type
@current_user
@current_user.blog_views_count >= 5
n
c
user.type
JSON.parse(subject.body)
c
JSON.parse(subject.body)
user.type
user
user.
c
Subscription.where(end_date: Date.tomorrow)
c
cc
c
c'
c
continue
C
c
JSON.parse(subject.body)
c
user
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
cc
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(response.body)
JSON.parse(subject.body)
c
if @user&.authenticate(params[:password])c
if @user&.authenticate(params[:password])
@user&.authenticate(params[:password])
n
@user
n
c
userc
user
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
params
user
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
user
c
user
c
JSON.parse(subject.body)
c
user.present? && user.otp_valid
n
c
user.otp_valid
user
n
c
params
c
cc
c
 Plan.find_by(id: params[:id])
params[:id]
@plan
n
params
c
render json: { plan: plan, content: 'Plan Deleted Successfully.' }, status: :no_content
plan
c
plan1
n
plan1
n
plan1
n
@plan
c
@plan
n
params
@plan
n
otp
n
c
params
JSON.parse(subject.body)
c
JSON.parse(subject.body)
params
c
cc
c
JSON.parse(subject.body)
params
c
subscription
c
JSON.parse(subject.body)
params
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
params
JSON.parse(subject.body)
c
subscription.valid?
n
