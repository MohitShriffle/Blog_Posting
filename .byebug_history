c
@current_user
c
n
@user.verified != true
c
@user.verified
@user
n
@user
c
n
c
n
c
JSON.parse(subject.body)
c
cv
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
params
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
@user
c
JSON.parse(subject.body)
c
User.find_by(otp: params[:otp].to_s)
User.find_by(otp: params[:otp].to_s
params[:otp].to_s
params[:otp]
c
params
user
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
check_can_update
c
check_can_update
c
check_can_update
c
check_can_update
c
check_can_update
c
(@current_user.type == 'Premium') || (@blog.user == @current_user && @blog.modifications_count < 2 )
c
check_can_update
c
 user.verified != false 
c
 user.verified != false c
 user.verified != false
if user.verified != false
c
subscription
n
subscription
c
check_valid_attributes
c
check_valid_attributes
c
check_valid_attributes
c
check_valid_attributes
c
check_valid_attributes
c
check_valid_attributes(params[:auto_renewal])
c
@plan.price == params[:price].to_d
@plan.nil?
params[:price]
params[:price].to_d
(@plan.nil? || @plan.price != params[:price].to_d)
c
check_valid_attributes(params[:auto_renewal])
c
check_valid_attributes(params[:auto_renewal])
c
check_valid_attributes(params[:auto_renewal])
c
duration[@plan.duration.parameterize.underscore.to_sym]
c
@plan.duration.parameterize.underscore.to_sym
"monthly".parameterize.underscore.to_sym
duration[:monthly]
duration[monthly]
duration["monthly"]
duration.@plan.duration
duration
@plan.duration.duration
@plan.duration
plan.duration
c
n
[true, false].include?( params[:auto_renewal].to_s.to_boolean)
n
c
[true, false].include?( params[:auto_renewal]=='true')
n
c
n
c
n
c
render json: {message: "Plan Not Found"} unless plan = Plan.find_by(id: params[:plan_id].to_s)c
render json: {message: "Plan Not Found"} unless plan = Plan.find_by(id: params[:plan_id].to_s)
plan = Plan.find_by(id: params[:plan_id].to_s)render json: {message: "Plan Not Found"} unless plan = Plan.find_by(id: params[:plan_id].to_s)
plan = Plan.find_by(id: params[:plan_id].to_s)
c
n
c
params
if plan.nil? || plan.price != params[:price].to_d
c
params
c
paramsc
params
c
cc
c
@subscription
@subscription.user== @current_user
n
@subscription.user== @current_user
c
 @current_user.id
c
 @current_user.id
@subscription.user.id
@subscription.user== @current_user
@subscription
n
@subscription
c
user
c
can :manage,Subscription, { user:}
can :read, Subscription, user_id: user.id
can :create, Subscription, { user: }
can :create, Subscription, { user: }\
can %i[update destroy], Subscription, { user:}
user
user.blank?
    byebug
c
@subscription
c
saved_file
c
Subscription.where(auto_renewal: true).where('end_date <= ?', Date.today)
c
response.bodyc
response.body
responce
response
c
subscription_to_renew.each(&:renew)
Subscription.where(auto_renewal: true).where('end_date <= ?', Date.today)
c
expired_subscription
c
cc
c
Subscription.all
c
Subscription.all
c
expired_subscription
c
Subscription.all
expired_subscriptions
c
expired_subscriptions
n
expired_subscriptions
expired_subscription
c
Subscription.where('end_date < ?', Date.today)
c
Subscription.where('end_date < ?', Date.today)
c
expired_subscription
c
Subscription.all
Subscription.where('end_date < ?', Date.today)
c
Subscription.where('end_date < ?', Date.today)
n
Subscription.where('end_date < ?', Date.today)
c
Subscription.all
Subscription.al
c
expired_subscription
c
Subscription.where('end_date < ?', Date.today)
ubscription.where('end_date < ?', Date.today)
n
c
expired_subscription.end_date
expired_subscription
c
Subscription.where('end_date < ?', Date.today)
n
c
Subscription.where('end_date < ?', Date.today)
n
c
non_expired_subscription.end_date
non_expired_subscription.auto_renewal
c
n
c
non_expired_subscription.auto_renewal
non_expired_subscription
c
((BlogView.all).count)
FactoryBot.create(:blog_view).all.count
FactoryBot.create(:blog_view).all.conut
FactoryBot.create(:blog_view).count
FactoryBot.create(:blog_view)
blog_view
c
u
